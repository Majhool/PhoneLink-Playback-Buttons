# .github/actions/ahk-compiler/action.yml

name: 'Compile AHK v2 Script (Corrected)'
description: 'Downloads and installs AHK v2 using specific commands, then compiles a script to .exe.'
author: 'Generated by Gemini (Corrected based on user feedback)'

inputs:
  script_file:
    description: 'Path to the input AHK v2 script file.'
    required: true
  output_file:
    description: 'Path for the generated .exe file.'
    required: true
  icon_file:
    description: 'Optional path to an .ico file for the executable.'
    required: false
  architecture:
    description: 'The architecture for the compiled executable. Can be "x64" or "x86".'
    required: false
    default: 'x64'

outputs:
  exe_path:
    description: 'The absolute path to the compiled executable file.'

runs:
  using: 'composite'
  steps:
    - name: Download AutoHotkey v2 Setup
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://github.com/AutoHotkey/AutoHotkey/releases/download/v2.0.19/AutoHotkey_2.0.19_setup.exe" -OutFile "ahk_setup.exe"

    - name: Install AutoHotkey with specified commands
      shell: pwsh
      run: |
        Write-Host "Installing AutoHotkey using /silent /elevate..."
        Start-Process -FilePath ".\ahk_setup.exe" -ArgumentList "/silent", "/elevate" -Wait

    - name: Define Installation Paths
      id: paths
      shell: pwsh
      run: |
        $ahkDir = "$env:ProgramFiles\AutoHotkey"
        Write-Host "Assuming AutoHotkey is installed in: $ahkDir"
        if (-not (Test-Path $ahkDir)) {
            Write-Error "AutoHotkey installation directory not found at the default location."
            exit 1
        }
        echo "ahk_dir=$ahkDir" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Download and Install Ahk2Exe Compiler Silently
      shell: pwsh
      run: |
        $ahkDir = "${{ steps.paths.outputs.ahk_dir }}"
        $ahkExe = Join-Path $ahkDir "v2\AutoHotkey64.exe"
        $compilerInstallerScript = Join-Path $ahkDir "UX\install-ahk2exe.ahk"
        
        Write-Host "Running compiler installer: $compilerInstallerScript"
        Write-Host "Passing '/Y' to bypass the confirmation dialog (based on 'if !A_Args.Length')."
        
        & $ahkExe $compilerInstallerScript /Y
        
        # Wait for download and extraction to finish
        Start-Sleep -Seconds 8

    - name: Verify Ahk2Exe Installation
      shell: pwsh
      run: |
        $compilerPath = "${{ steps.paths.outputs.ahk_dir }}\Compiler\Ahk2Exe.exe"
        if (-not (Test-Path $compilerPath)) {
          Write-Error "FATAL: Ahk2Exe.exe was not found at '$compilerPath' after installation attempt."
          Write-Host "Listing contents of Program Files for debugging:"
          Get-ChildItem -Path "$env:ProgramFiles" -Depth 1
          Write-Host "Listing contents of AHK install directory:"
          Get-ChildItem -Path "${{ steps.paths.outputs.ahk_dir }}" -Recurse
          exit 1
        }
        Write-Host "Ahk2Exe.exe successfully installed."

    - name: Compile AHK Script
      shell: pwsh
      run: |
        $outputDirectory = Split-Path -Path "${{ inputs.output_file }}" -Parent
        if ($outputDirectory) {
          Write-Host "Ensuring output directory '$outputDirectory' exists..."
          New-Item -ItemType Directory -Path $outputDirectory -Force | Out-Null
        }
        
        $ahkDir = "${{ steps.paths.outputs.ahk_dir }}"
        $compilerExe = Join-Path $ahkDir "Compiler\Ahk2Exe.exe"

        if ('${{ inputs.architecture }}' -eq 'x86') {
          $baseFile = Join-Path $ahkDir "v2\AutoHotkey32.exe"
        } else {
          $baseFile = Join-Path $ahkDir "v2\AutoHotkey64.exe"
        }

        $compileArgs = @("/in", "`"${{ inputs.script_file }}`"", "/out", "`"${{ inputs.output_file }}`"", "/base", "`"$baseFile`"")

        if ('${{ inputs.icon_file }}') {
            if (Test-Path "${{ inputs.icon_file }}") {
                $compileArgs += "/icon", "`"${{ inputs.icon_file }}`""
            } else {
                Write-Warning "Icon file not found at '${{ inputs.icon_file }}'. Compiling without icon."
            }
        }
        
        # --- 🚀 الجزء الأهم للتشخيص 🚀 ---
        Write-Host "--- Attempting to compile with command: ---"
        Write-Host "$compilerExe $($compileArgs -join ' ')"
        Write-Host "-------------------------------------------"
        
        # تنفيذ الأمر مع إظهار أي أخطاء (stderr)
        & $compilerExe $compileArgs *>&1 | Write-Host
        
        Write-Host "--- Compilation command finished. ---"
        Write-Host "--- Checking contents of output directory: '$outputDirectory' ---"
        if (Test-Path $outputDirectory) {
            ls $outputDirectory
        } else {
            Write-Warning "Output directory was not created."
        }
        Write-Host "-------------------------------------------"

        if (-not (Test-Path "${{ inputs.output_file }}")) {
            Write-Error "COMPILATION FAILED: Final output file was not found."
            exit 1
        }
        Write-Host "✅ Compilation successful. Output file created."

    - name: Set Action Output
      id: set_output
      shell: pwsh
      run: |
        $absPath = Convert-Path "${{ inputs.output_file }}"
        echo "exe_path=$absPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append