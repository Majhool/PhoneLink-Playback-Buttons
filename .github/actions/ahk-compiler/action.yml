name: 'Compile AHK v2 Script (File-Based Output)'
description: 'Compiles an AHK script and writes the output path to a file.'
author: 'Generated by Gemini'

inputs:
  script_file:
    description: 'Path to the input AHK v2 script file.'
    required: true
  output_file:
    description: 'Path for the generated .exe file.'
    required: true
  icon_file:
    description: 'Optional path to an .ico file.'
    required: false
  architecture:
    description: 'The architecture (x64 or x86).'
    required: false
    default: 'x64'

runs:
  using: 'composite'
  steps:
    - name: Download AutoHotkey v2 Setup
      shell: pwsh
      run: Invoke-WebRequest -Uri "https://github.com/AutoHotkey/AutoHotkey/releases/download/v2.0.19/AutoHotkey_2.0.19_setup.exe" -OutFile "ahk_setup.exe"

    - name: Install AutoHotkey
      shell: pwsh
      run: Start-Process -FilePath ".\ahk_setup.exe" -ArgumentList "/silent", "/elevate" -Wait

    - name: Define Installation Paths
      id: paths
      shell: pwsh
      run: |
        $ahkDir = "$env:ProgramFiles\AutoHotkey"
        if (-not (Test-Path $ahkDir)) {
            Write-Error "AutoHotkey installation directory not found."
            exit 1
        }
        echo "ahk_dir=$ahkDir" >> $env:GITHUB_OUTPUT

    - name: Download and Install Ahk2Exe Compiler
      shell: pwsh
      run: |
        $ahkDir = "${{ steps.paths.outputs.ahk_dir }}"
        $ahkExe = Join-Path $ahkDir "v2\AutoHotkey64.exe"
        $compilerInstallerScript = Join-Path $ahkDir "UX\install-ahk2exe.ahk"
        & $ahkExe $compilerInstallerScript /Y
        Start-Sleep -Seconds 10 # Wait for download and extraction

    - name: Compile AHK Script and Write Path to File
      shell: pwsh
      run: |
        $compilerExe = "${{ steps.paths.outputs.ahk_dir }}\Compiler\Ahk2Exe.exe"
        if (-not (Test-Path $compilerExe)) {
          Write-Error "FATAL: Ahk2Exe.exe was not found at '$compilerExe'."
          exit 1
        }
        
        # Construct paths
        $scriptAbs = (Resolve-Path -Path "${{ inputs.script_file }}").Path
        $outputAbs = (Join-Path -Path (Get-Location).Path -ChildPath "${{ inputs.output_file }}")
        $iconAbs = ""
        if ('${{ inputs.icon_file }}' -and (Test-Path "${{ inputs.icon_file }}")) {
            $iconAbs = (Resolve-Path -Path "${{ inputs.icon_file }}").Path
        }

        # Create output directory
        New-Item -ItemType Directory -Path (Split-Path -Path $outputAbs -Parent) -Force -ErrorAction SilentlyContinue | Out-Null
        
        # Determine base file
        $baseFile = Join-Path "${{ steps.paths.outputs.ahk_dir }}" "v2\AutoHotkey64.exe"
        if ('${{ inputs.architecture }}' -eq 'x86') {
          $baseFile = Join-Path "${{ steps.paths.outputs.ahk_dir }}" "v2\AutoHotkey32.exe"
        }
        
        # Build and Run Compile Command
        $compileArgs = @("/silent", "/in", $scriptAbs, "/out", $outputAbs, "/base", $baseFile)
        if ($iconAbs) { $compileArgs += "/icon", $iconAbs }
        Write-Host "Compiling with command: $compilerExe $($compileArgs -join ' ')"
        & $compilerExe $compileArgs
        
        # Check if the output file was created
        if (-not (Test-Path $outputAbs)) {
            Write-Error "COMPILATION FAILED: Final output file was not created at '$outputAbs'."
            exit 1
        }
        
        # Write the successful path to a file instead of using outputs
        Write-Host "âœ… Compilation successful. Writing path to exe_path.txt"
        $outputAbs | Out-File -FilePath "exe_path.txt"
