# .github/actions/ahk-compiler/action.yml

name: 'Compile AHK v2 Script'
description: 'Downloads AutoHotkey v2 and compiles an .ahk script into an .exe file from scratch.'
author: 'Generated by Gemini'

inputs:
  script_file:
    description: 'Path to the input AHK v2 script file.'
    required: true
  output_file:
    description: 'Path for the generated .exe file.'
    required: true
  icon_file:
    description: 'Optional path to an .ico file for the executable.'
    required: false
  architecture:
    description: 'The architecture for the compiled executable. Can be "x64" or "x86".'
    required: false
    default: 'x64'

outputs:
  exe_path:
    description: 'The full path to the compiled executable file.'

runs:
  using: 'composite'
  steps:
    - name: Define Environment Variables
      shell: pwsh
      run: |
        echo "AHK_SETUP_URL=https://github.com/AutoHotkey/AutoHotkey/releases/download/v2.0.19/AutoHotkey_2.0.19_setup.exe" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "AHK_INSTALL_PATH=${{ github.workspace }}\autohotkey" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Download AutoHotkey v2 Setup
      shell: pwsh
      run: |
        Write-Host "Downloading AutoHotkey from ${{ env.AHK_SETUP_URL }}"
        Invoke-WebRequest -Uri "${{ env.AHK_SETUP_URL }}" -OutFile "ahk_setup.exe"

    - name: Install AutoHotkey Silently
      shell: cmd
      run: |
        echo "Installing AutoHotkey to ${{ env.AHK_INSTALL_PATH }}"
        start /wait ahk_setup.exe /silent /elevate /D=${{ env.AHK_INSTALL_PATH }}

    - name: Download and Install Ahk2Exe Compiler
      shell: pwsh
      run: |
        $ahkExe = "${{ env.AHK_INSTALL_PATH }}\v2\AutoHotkey64.exe"
        $compilerInstallerScript = "${{ env.AHK_INSTALL_PATH }}\UX\install-ahk2exe.ahk"
        Write-Host "Running compiler installer script: $compilerInstallerScript"
        
        if (-not (Test-Path $ahkExe)) {
            Write-Error "AutoHotkey executable not found at $ahkExe"
            exit 1
        }
        if (-not (Test-Path $compilerInstallerScript)) {
            Write-Error "Compiler installer script not found at $compilerInstallerScript"
            exit 1
        }
        
        # We pass "/Y" as an argument to bypass the MsgBox confirmation
        & $ahkExe $compilerInstallerScript /Y
        
        # Give it a moment to complete the download and extraction
        Start-Sleep -Seconds 5

    - name: Verify Ahk2Exe Installation
      shell: pwsh
      run: |
        $compilerPath = "${{ env.AHK_INSTALL_PATH }}\Compiler\Ahk2Exe.exe"
        if (-not (Test-Path $compilerPath)) {
          Write-Error "FATAL: Ahk2Exe.exe was not found at $compilerPath after installation attempt."
          # List files for debugging
          Get-ChildItem -Path "${{ env.AHK_INSTALL_PATH }}" -Recurse
          exit 1
        }
        Write-Host "Ahk2Exe.exe successfully installed at $compilerPath"

    - name: Prepare Compiler Arguments
      id: prep_args
      shell: pwsh
      run: |
        if ('${{ inputs.architecture }}' -eq 'x86') {
          $baseFile = "${{ env.AHK_INSTALL_PATH }}\v2\AutoHotkey32.exe"
        }
        else {
          $baseFile = "${{ env.AHK_INSTALL_PATH }}\v2\AutoHotkey64.exe"
        }
        echo "base_file_path=$baseFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

        $iconArg = ""
        if ('${{ inputs.icon_file }}') {
            $iconArg = "/icon `"${{ inputs.icon_file }}`""
        }
        echo "icon_argument=$iconArg" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Compile AHK Script
      shell: pwsh
      run: |
        $compiler = "${{ env.AHK_INSTALL_PATH }}\Compiler\Ahk2Exe.exe"
        $baseFile = "${{ steps.prep_args.outputs.base_file_path }}"
        $iconArg = '${{ steps.prep_args.outputs.icon_argument }}'
        
        Write-Host "Compiler: $compiler"
        Write-Host "Source: ${{ inputs.script_file }}"
        Write-Host "Output: ${{ inputs.output_file }}"
        Write-Host "Base: $baseFile"
        Write-Host "Icon Arg: $iconArg"
        
        & $compiler /in "${{ inputs.script_file }}" /out "${{ inputs.output_file }}" /base "$baseFile" $iconArg

    - name: Set Action Output
      id: set_output
      shell: pwsh
      run: |
        $absPath = Convert-Path "${{ inputs.output_file }}"
        echo "exe_path=$absPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append