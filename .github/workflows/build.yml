# اسم الـ Workflow الذي سيظهر في صفحة Actions
name: Compile AHK Script (Direct Compiler)

# المشغّل: هذا الـ Action سيعمل يدويًا من خلال واجهة GitHub
on:
  workflow_dispatch:
    inputs:
      # المدخل الأول: مسار ملف السكربت
      script_path:
        description: 'Path to the input .ahk script'
        required: true
        default: 'Playback.ahk'

      # المدخل الثاني: مسار ملف الأيقونة
      icon_path:
        description: 'Path to the .ico file (optional)'
        required: false
        default: 'play_pause_icon_137298.ico'

      # المدخل الثالث: اسم الملف التنفيذي الناتج
      output_name:
        description: 'Name of the output .exe file (without extension)'
        required: true
        default: 'Playback'

jobs:
  build:
    # سيتم تشغيل هذا الإجراء على نظام ويندوز
    runs-on: windows-latest

    steps:
      # الخطوة 1: جلب الكود من المستودع
      - name: Checkout repository code
        uses: actions/checkout@v4

      # الخطوة 2: تنزيل وتثبيت مترجم Ahk2Exe مباشرة
      - name: Download and Extract Ahk2Exe Compiler
        shell: pwsh
        run: |
          # استخدام الرابط المباشر للمترجم الذي قدمته
          $compilerZipUrl = "https://github.com/AutoHotkey/Ahk2Exe/releases/download/Ahk2Exe1.1.37.02a0a/Ahk2Exe1.1.37.02a0.zip"
          $compilerZipFile = "Ahk2Exe.zip"
          $compilerExtractPath = "${{ runner.temp }}\Ahk2Exe" # استخراج الملفات في مجلد مؤقت

          echo "Downloading Ahk2Exe from $compilerZipUrl"
          Invoke-WebRequest -Uri $compilerZipUrl -OutFile $compilerZipFile
          
          echo "Extracting compiler to $compilerExtractPath"
          Expand-Archive -Path $compilerZipFile -DestinationPath $compilerExtractPath

          # إضافة مسار المترجم (Compiler) إلى متغيرات البيئة ليسهل الوصول إليه
          echo $compilerExtractPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # الخطوة 3: تجميع السكربت إلى ملف EXE
      - name: Compile AHK script
        shell: pwsh
        run: |
          # إنشاء متغيرات بناءً على المدخلات
          $scriptFile = "${{ github.workspace }}\${{ inputs.script_path }}"
          $outputFile = "${{ github.workspace }}\${{ inputs.output_name }}.exe"
          $iconFile = "${{ github.workspace }}\${{ inputs.icon_path }}"

          # بناء أمر المترجم. لا حاجة لتحديد مسار Ahk2Exe.exe لأنه أصبح في الـ PATH
          $command = "Ahk2Exe.exe /in `"$scriptFile`" /out `"$outputFile`""
          
          # التحقق من وجود ملف الأيقونة وإضافته للأمر إذا كان موجودًا
          if (Test-Path $iconFile) {
            $command += " /icon `"$iconFile`""
            echo "Using icon: $iconFile"
          } else {
            echo "No icon file found at '$iconFile', compiling without a custom icon."
          }
          
          echo "Running command: $command"
          # تنفيذ الأمر
          Invoke-Expression $command
          Start-Sleep -Seconds 3

      # الخطوة 4: رفع الملف التنفيذي الناتج كـ Artifact
      - name: Upload compiled executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.output_name }} # اسم الـ Artifact الذي سيتم رفعه
          path: ${{ inputs.output_name }}.exe # مسار الملف الناتج الذي سيتم رفعه